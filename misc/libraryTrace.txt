## This file is to trace back version of libraries, and modification in library files


## libraries versions

* GUDHI: 
* Dionysus:
* PHAT: 1.4.1
* CGAL: 4.13
* boost: 1.69.0 (corresponding to BH 1.69.0-1)
* gmp: 4.2.4 (corresponding to http://win-builder.r-project.org/GPLcompliance/ )


## modifications in libraries

# boost

* src/boost/serialization/binary_object.hpp
  missing in R package BH

* src/boost/container/detail/copy_move_algo.hpp
  added from boost 1.69 and modified due to [Wclass-memaccess] warning in debian
  typename dtl::enable_if_memtransfer_copy_assignable<I, F, F>::type move_backward(I f, I l, F r)
  F memmove(I f, I l, F r)
  F memmove_n(I f, U n, F r)
  I memmove_n_source(I f, U n, F r)
  static_cast<void *> on the first argument when calling std::memmove( , , )


# CGAL

* src/CGAL/Alpha_shape_3.h
  Alpha_shape_3<Dt,EACT>::Classification_type Alpha_shape_3<Dt,EACT>::classify(Alpha_status_const_iterator as, const NT& alpha) const
  resolve reference binding to null pointer: '*as' can fetch NULL memory if 'as' corresponds to NULL pointer

* src/CGAL/Compact_container.h
  bool is_used(const_iterator ptr) const
  bool owns(const_iterator cit) const
  std::size_t hash_value(const CC_iterator<DSC, Const>&  i)
  std::size_t operator()(const CGAL::internal::CC_iterator<DSC, Const>& i) const
  resolve reference binding to null pointer: '*pointer' can fetch NULL memory if 'pointer' corresponds to NULL pointer

* src/CGAL/Concurrent_compact_container.h
  bool is_used(const_iterator ptr) const
  bool owns(const_iterator cit) const
  static Type type(const_iterator ptr)
  CCC_iterator (const iterator &it)
  CCC_iterator & operator= (const iterator &it)
  std::size_t hash_value(const CCC_iterator<CCC, Const>&  i)
  std::size_t operator()(const CGAL::CCC_internal::CCC_iterator<CCC, Const>& i) const
  resolve reference binding to null pointer: '*pointer' can fetch NULL memory if 'pointer' corresponds to NULL pointer

* src/CGAL/TDS_full_cell_default_storage_policy.h
  Xor_type xor_of_vertices(const int cur_dim) const
  Vertex_handle mirror_vertex(const int i, const int cur_dim) const
  resolve reference binding to null pointer: '*vertices_[i]' can fetch NULL memory if 'vertices_[i]' corresponds to NULL pointer

* src/CGAL/Triangulation.h
  bool is_infinite(const Vertex & v) const
  resolve reference binding to null pointer: '*infinite_vertex()' can fetch NULL memory if 'infinite_vertex()' corresponds to NULL pointer

* src/CGAL/Triangulation_ds_cell_base_3.h
  void set_neighbor(int i, Cell_handle n)
  void set_neighbors(Cell_handle n0, Cell_handle n1, Cell_handle n2, Cell_handle n3)
  resolve reference binding to null pointer: '*n' can fetch NULL memory if 'n' corresponds to NULL pointer

* src/CGAL/NewKernel_d/function_objects_cartesian.h
  struct Oriented_side
  CS is the name of Intel CPU registers defined on Solaris

* Below are changes due to updating package RcppEigen to Eigen 3.3.2:
  https://github.com/RcppCore/RcppEigen/issues/41
  - now fixed in CGAL 4.13


# Dionysus

* src/topology/rips.hpp
  void bros_kerbosch(...) const (and other places where bros_kerbosch is used)
  line 34, 56, 86, 126, 140, 162, 167, 184, 190: change 'excluded' to 'excludedNext' (where excludedNext = excluded + 1) to prevent overflow and change logic accordingly

* src/utilities/counter.h (and other places where Count(x) is used)
  replace macro Count() by inline function Count()


# GUDHI

* src/gudhi/Alpha_complex.h
  void init(Filtration_value max_alpha_square)
  template<typename Simplex_handle> void propagate_alpha_filtration(Simplex_handle f_simplex, int decr_dim)
  namespace of std::isnan() function is specified

* src/gudhi/Simplex_tree.h
  Simplex_tree(Simplex_tree && old)
  line 354-376: temporarily comment out move constructor so that copy constructor is used instead to prevent shallow move

  bool rec_make_filtration_non_decreasing(Siblings * sib)
  line 1183: added this to capture clause in lambda function

* src/gudhi/Simplex_tree/Simplex_tree_node_explicit_storage.h
  Simplex_tree_node_explicit_storage(const Simplex_tree_node_explicit_storage & stnes)
  line 53-61: added copy constructor

  Siblings * children() const
  line 71-74: changing to const function
